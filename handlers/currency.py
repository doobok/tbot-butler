import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode

from states.mane import CurrencySection
from utils.db.currency_db import Currency
from utils.keyboards.currency_kbd import currency_menu, currency_list
from utils.misc.currency_utils import currency
from utils.requests.currency_requests import CurrencyRequest


async def opn_currency(msg: types.Message, state: FSMContext):
    await CurrencySection.in_currency.set()
    result = await Currency.get_currency(msg)
    cu = result.get('currency')
    if cu is not None:
        currency_code = currency[cu]
        currencies = await CurrencyRequest.get_mono_curr()
        cr = next(x for x in currencies if x['currencyCodeA'] == cu)
        if cr.get('rateSell', False):
            multiply = cr.get('rateSell', 0)
        else:
            multiply = cr.get('rateCross', 0)
        await state.update_data(currency_mult=multiply)
        await state.update_data(currency_code=currency_code)
        txt = f'üë®‚Äçü¶≥ –ü–æ—Ç–æ—á–Ω–∞ –≤–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ç—Ä–∞—Ü—ñ—ó - <b>{currency_code}</b>\n–ø–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å <b>{multiply}</b> ' \
              f'—â–æ–π–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π, –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç–∏ —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ç—Ä–∞—Ü—ñ—ó'
    else:
        txt = 'üíÅ‚Äç‚ôÇÔ∏èÔ∏è –î–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –≤–∞–ª—é—Ç—É'
    await msg.answer(txt, parse_mode=ParseMode.HTML, reply_markup=currency_menu())


async def menu_currency(msg: types.Message, state: FSMContext):
    await msg.answer(f'–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó', reply_markup=currency_list())


async def select_currency(query: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await query.answer()
    currencies = await CurrencyRequest.get_mono_curr()
    if type(currencies) is not list:
        await query.message.edit_text('‚ö†Ô∏è –ù–µ–≤–¥–∞—á–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É '
                                      '–ø—ñ–∑–Ω—ñ—à–µ')
    else:
        currency_code = int(callback_data['code'])
        cu = currency[currency_code]
        await Currency.upd_currency(query.from_user.id, currency_code)

        cr = next(x for x in currencies if x['currencyCodeA'] == currency_code)
        if cr.get('rateSell', False):
            multiply = cr.get('rateSell', 0)
        else:
            multiply = cr.get('rateCross', 0)
        await state.update_data(currency_mult=multiply)
        await state.update_data(currency_code=currency_code)
        txt = f'–í–∏ –æ–±—Ä–∞–ª–∏ <b>{cu}</b> –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å <b>{multiply}</b>\n–≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É, —â–æ–± –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ –≥—Ä–∏–≤–Ω—é\n–≤–∞–ª—é—Ç—É ' \
              f'–º–æ–∂–Ω–∞ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å –∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ–Ω—é '
        await query.message.edit_text(txt, parse_mode=ParseMode.HTML)


async def use_currency(msg: types.Message, state: FSMContext):
    val = list(map(float, re.findall(r"""\d+ # one or more digits
                                  (?: # followed by...
                                      \. # a decimal point 
                                      \d+ # and another set of one or more digits
                                  )? # zero or one times""",
                                     msg.text,
                                     re.VERBOSE)))
    if len(val) < 1:
        await msg.answer('–ë—É–¥—å\-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ')
    else:
        summa = val[0]
        data = await state.get_data()
        multiply = data.get('currency_mult', 0)
        currency_code = data.get('currency_code', 0)
        result = summa * multiply
        code = currency[currency_code]
        if multiply > 0:
            txt = f'üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç <b>{result}</b> –≥—Ä–Ω. –∑–∞ <b>{summa}</b> {code}\n–∫—É—Ä—Å <i>{multiply}</i>'
        else:
            txt = '–î–ª—è –ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É'
        await msg.answer(txt, parse_mode=ParseMode.HTML)
